{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["Table","react_default","a","createElement","className","Table_TableHeader","Table_TableBody","charactersData","this","props","removeCharacter","editCharacter","Component","TableBody","rows","map","row","index","key","title","content","Date","toLocaleString","onClick","id","TableHeader","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","name","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","type","onChange","MyApp","characters","filter","character","console","log","toConsumableArray","concat","src_Table","src_Form","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.a46a5c60.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Table extends Component{\r\n    \r\n    render(){\r\n        return (\r\n            <table className = \"table\">\r\n                <TableHeader/>\r\n                <TableBody \r\n                charactersData =  { this.props.charactersData }\r\n                removeCharacter = { this.props.removeCharacter}\r\n                editCharacter = { this.props.editCharacter }\r\n                 />\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nconst TableBody = (props) => {\r\n     const rows = props.charactersData.map((row,index) => {\r\n         return(\r\n             <tr key = {index} >\r\n             <td>{index+1}</td>\r\n                <td>{row.title}</td>\r\n                 <td>{row.content}</td>\r\n                 <td>{ new Date().toLocaleString()}</td>\r\n                 <td>{new Date().toLocaleString()}</td>\r\n                 <td><button className=\"btn btn-primary\" onClick={() => props.editCharacter(row)}>Edit</button></td>\r\n                 <td><button className=\"btn btn-secondary\" onClick={() => props.removeCharacter(row.id)}>Delete</button></td>\r\n             </tr>\r\n         );\r\n     });\r\n        return(\r\n        <tbody>{ rows }</tbody>\r\n        );\r\n}\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n         <thead>\r\n            <tr>\r\n                <th>S.NO</th>\r\n                <th>Title</th>\r\n                <th>Content</th>\r\n                <th>Created Date</th>\r\n                <th>Updated Date</th>\r\n                <th>Edit</th>\r\n                <th>Remove</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nexport default Table;","import React, {Component} from 'react';\r\n\r\nclass Form extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.initialState = {\r\n            title: '',\r\n            content: ''\r\n        }\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    handleChange = event => {\r\n        const {name , value} =  event.target;\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <form className=\"form\">\r\n                <label>Note</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    className=\"form-control col-sm-5\"\r\n                    value = {this.state.title}\r\n                    onChange = {this.handleChange} />\r\n                <label>Content</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"content\"\r\n                    value = {this.state.content}\r\n                    className=\"form-control col-sm-5\"\r\n                    onChange={this.handleChange} />\r\n                    <br/>\r\n                <input \r\n                    type=\"button\"\r\n                    value=\"Submit\"\r\n                    className=\"btn btn-primary\" \r\n                    onClick={this.submitForm}\r\n                    />\r\n            </form>\r\n        );  \r\n    }\r\n}\r\n\r\nexport default Form;","\r\nimport React, {Component} from 'react';\r\nimport Table from './Table'\r\nimport Form from './Form'\r\nclass MyApp extends Component{\r\n\r\n    state = {\r\n        characters :  [\r\n\r\n        ]\r\n    };\r\n\r\n\r\n    // componentDidMount() {\r\n    //     const url = \"http://localhost:8051/notes/getAll\";\r\n    //     fetch(url)\r\n    //         .then(result => result.json())\r\n    //         .then(result => {\r\n    //             this.setState({\r\n    //                 characters: result\r\n    //             })\r\n    //         });\r\n    // }\r\n\r\n    removeCharacter = index => {\r\n        const { characters } = this.state;\r\n\r\n        this.setState({\r\n            characters: characters.filter((character) => { \r\n                return character.id !== index;\r\n            })\r\n        });\r\n        \r\n        // deleteData(`http://localhost:8051/notes/delete`, index)\r\n        // .then(data => this.setState({\r\n        //     characters: characters.filter((character) => { \r\n        //         return character.id !== index;\r\n        //     })\r\n        // })) // JSON-string from `response.json()` call\r\n        // .catch(error => console.error(error));\r\n\r\n    }\r\n\r\n    editCharacter = character => {\r\n        console.log(character);\r\n    }\r\n\r\n    handleSubmit = character => {\r\n        this.setState({characters: [...this.state.characters, character]});\r\n        // postData(`http://localhost:8051/notes/addNote`, character)\r\n        //     .then(data => this.setState({characters: [...this.state.characters, data]})) // JSON-string from `response.json()` call\r\n        //     .catch(error => console.error(error));\r\n    }\r\n\r\n    render () {\r\n      return (\r\n        <div className=\"container\">\r\n            <Table charactersData =\r\n             {this.state.characters}\r\n             removeCharacter={ this.removeCharacter }\r\n             editCharacter = { this.editCharacter }\r\n             />\r\n             <br />\r\n             <Form handleSubmit = {this.handleSubmit}/>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n  export default MyApp;\r\n\r\n  function postData(url = ``, data = {}) {\r\n    // Default options are marked with *\r\n      return fetch(url, {\r\n          method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n          mode: \"cors\", // no-cors, cors, *same-origin\r\n          cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n          credentials: \"same-origin\", // include, *same-origin, omit\r\n          headers: {\r\n              \"Content-Type\": \"application/json; charset=utf-8\",\r\n              // \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          },\r\n          redirect: \"follow\", // manual, *follow, error\r\n          referrer: \"no-referrer\", // no-referrer, *client\r\n          body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n      })\r\n      .then(response => response.json()); // parses response to JSON\r\n  }\r\n\r\n\r\n  function deleteData(url, item) {\r\n    return fetch(url + '/' + item, {\r\n      method: 'delete'\r\n    });\r\n  }","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MyApp from './App';\n\n    // ========================================\n  \n    ReactDOM.render(\n      <MyApp />,\n      document.getElementById('root')\n    );\n    "],"sourceRoot":""}